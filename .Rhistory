x <- rnorm(10)
print(x)
x <- rnorm(10,20,2)
print(x)
summary(x)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
x <- 1:100
set.seed(10)
e <- rnorm(100,0,1)
y <- 1.5 - 3*x + e
plot(x,y)
x <- 1:100
set.seed(20)
e <- rnorm(100,0,1)
y <- 1.5 - 3*x + e
plot(x,y)
help("rbinom")
q()
x <- rnorm(100)
hist(x)
hist(x)
dev.off()
hist(x)
hist(x)
dev.set()
hist(x)
graphics.off()
x <- rnorm(100)
y <- x + rnorm(100)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x, y)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x, y)
par(las = 3)
plot(x, y)
par(las = 4)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x, y)
par(las = 3)
plot(x, y)
par(las = 1)
plot(x, y)
par("lty")
par("lwd")
par("col")
par(blue)
par("pch")
par("bg")
par("mar")
par("omg")
par("oma")
par("mfrow")
par("mfcol")
plot(x, y)
x1 <- rnorm(10)
y1 <- rnorm(10)
points(x1, y1, col="red")
text("demo text")
lines(x1,y1)
text(x1,y1,text="demo")
text(x1,y1,"demo")
pwd
dir
pdf(file = "testRplot.pdf")
x <- rnorm(100)
hist(x)
dev.off()
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
ls
dev.list
help
q()
dev.list
dev.list()
q()
str(.platform)
str(.Platform)
version
q()
log(-1)
printmessage<- function(x){
if(x>0)
print("x s greater than zero")
else
print(x is less than or equal to zero)
printmessage<- function(x){
if(x>0)
print("x s greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(NA)
printmessage2<- function(x){
if (is.na(x))
print("x is a missing value!")
else if(x>0)
print("x s greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage2(NA)
x<-log(-1)
printmessage2(x)
q()
mean(x)
mean(a)
traceback()
lm(x~y)
lm(a-b)
lm(a~b)
lm(y~x)
lm(y1-x1)
lm(y1~x1)
lm(a~b)
lm(b~a)
traceback()
debug(lm)
lm(b~a)
n
n
n
n
n
n
n
n
n
n
options(error = recover)
read.csv("nosuchfile")
n
cube<-function(x,n){
x^3
}
cube(3)
pow<-function(x=4,n=3){
x^n
}
pow()
x<-1:10
if(x>5){
x<-0
}
x
library(datasets)
data(iris)
ls
ls()
?iris
summary(iris)
str(iris)
iris$species
iris
head(iris)
i<-split(iris,iris$species)
i<-split(iris,iris$Species)
i
lapply(i,function(X) colMeans(X[,c("Sepal.Length"))
lapply(i,function(X) colMeans(X[,c("Sepal.Length")])
)
lapply(i,function(X) colMeans(X[,c("Sepal.Length","Sepal.Width)])
)
)
0
)
1
"
)
"
"
lapply(i,function(X) colMeans(X[,c("Sepal.Length","Sepal.Width")]))
colmeans(iris)
colMeans(iris)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris,2,mean)
rowMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.214-82.636
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
debug(ls)
ls()
n
n
n
n
n
n
tapply(iris$Sepal.Length,iris$species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
q()
n
n
n
n
n
n
getwd()
ls()
q()
a<- available.packages()
head(rownames(a),3)
install.packages("KernSmooth")
library(KernSmooth)
q()
cube<-function(f,n){
x^3
}
cube(3)
cube <- function(x,n){
x^3
}
cube(3)
x<-1:10
if(x>5){
x<-0
}
x
f<-function(x){
g<-function(y){
y+z
}
z<-4
x<-g(x)
}
z<-10
f(3)
f(3)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
z<-1
f(3)
z<-2
f(3)
z<-20
f(3)
x<-5
y<-if(x<3){
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z<-z+f
g <- x + y / z
if(d == 3L)
if(d == 3L)
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z<-z+f
g <- x + y / z
if(d == 3L)
return(g)
g<-g+10
g
}
q()
q()
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
?rpois()
?rnoorm
?rnorm()
?set.seed()
set.seed(10)
x<-rbinom(10,10,.5)
e<-rnorm(10,0,20)
y<-0.5+2*x+e
summary(y)
y
plot(x,y)
x
?by.total
?by.total()
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
q()
getwd()
getwd()
getwd()
?pprob
pnorm(.7,mean=.8,sd=.1)
qnorm(.95,mean=1100,sd=75)
pnorm(.95,mean=1100,sd=7.5,lower.tail=FALSE)
qnorm(.95,mean=1100,sd=7.5)
?pnorm
pnorm(.95,mean=1100,sd=7.5,lower.tail=TRUE)
pnorm(.95,mean=1100,sd=7.5)
pbinom(3,size=5,prob=0.5,lower.tail=FALSE)
sqrt(1/12000)
?runif
sqrt(1/1200)
ppois(10,lambda=5*3)
choose(9,3)
sqrt(1000/1200)
setwd("C:/Users/priti/Desktop/coursera_ds/repro research/PeerAssessment1")
Sys.Date()
weekdays(Sys.Date())
Sys.getlocale()
Sys.setlocale(LC_TIME,"English")
Sys.getlocale(LC_TIME)
Sys.getlocale(LC_ALL)
Sys.getlocale("LC_ALL")
Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME","English")
Sys.setlocale(LC_TIME=English")
""
Sys.setlocale(LC_TIME = "English")
Sys.setlocale("LC_TIME" , "English")
Sys.getlocale("LC_TIME")
source('~/.active-rstudio-document', echo=TRUE)
Sys.setlocale("LC_TIME","English")
new_activity$weekdaytype <- as.factor(ifelse(weekdays(new_activity$date) %in% c("Saturday","Sunday"),"weekend", "weekday"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
if(!file.exists("activity.csv"))
unzip("activity.zip")
activity_data<-read.csv("activity.csv", colClasses=c("numeric", "Date", "numeric"))
library(ggplot2)
library(plyr)
stepsPerDay<-ddply(activity_data,.(date),summarize, total=sum(steps,na.rm=TRUE))
g<-ggplot(na.omit(stepsPerDay),aes(total,fill=..count..)) + geom_histogram(position="identity",binwidth=2500) + xlab("Total steps per day") + ylab("Frequency (Number of days)") + ggtitle("Histogram of total steps per day")
print(g)
mean_totalsteps<-mean(stepsPerDay$total,na.rm=TRUE)
mean_totalsteps
median_totalsteps<-median(stepsPerDay$total,na.rm=TRUE)
median_totalsteps
#print(paste0("Mean and median of total steps per day are: ",mean_totalsteps,", ",median_totalsteps))
average_steps<-ddply(activity_data,.(interval),summarize, average=mean(steps,na.rm=TRUE))
qplot(interval,average,data=average_steps,geom="line")+ labs(title="Average daily activity pattern")+ylab("Average number of steps")
max_avgsteps_interval<-average_steps$interval[which.max(average_steps$average)]
#print(paste("The 5-minute interval which contains maximum of average number of steps is: ", max_avgsteps_interval))
max_avgsteps_interval
total_na<-sum(is.na(activity_data))
#print(paste("Total number of missing values in the dataset :",total_na))
total_na
interval_na<-activity_data$interval[is.na(activity_data$steps)]
interval_mean_forna<-sapply(interval_na, function(x) average_steps$average[which(average_steps$interval==x)])
new_activity<-activity_data
new_activity$steps[is.na(activity_data$steps)]<-interval_mean_forna
newstepsPerDay<-ddply(new_activity,.(date),summarize, total=sum(steps))
g<-ggplot(newstepsPerDay,aes(total,fill=..count..)) + geom_histogram(position="identity",binwidth=2500) + xlab("Total steps per day") + ylab("Frequency (Number of days)") + ggtitle("Histogram of total steps per day after imputting missing data")
print(g)
newmean_totalsteps<-mean(newstepsPerDay$total)
newmean_totalsteps
newmedian_totalsteps<-median(newstepsPerDay$total)
newmedian_totalsteps
#print(paste0("Mean and median of total steps per day are: ",newmean_totalsteps,", ",newmedian_totalsteps))
Sys.setlocale("LC_TIME","English")
new_activity$weekdaytype <- as.factor(ifelse(weekdays(new_activity$date) %in% c("Saturday","Sunday"),"weekend", "weekday"))
str(new_activity)
new_activity$weekdaytype <- as.factor(ifelse(weekdays(new_activity$date) %in% c("Saturday","Sunday"),"weekend", "weekday"),levels(weekend,weekday))
new_activity$weekdaytype <- as.factor(ifelse(weekdays(new_activity$date) %in% c("Saturday","Sunday"),"weekend", "weekday"),levels(weekend,weekday))
new_activity$weekdaytype <- as.factor(ifelse(weekdays(new_activity$date) %in% c("Saturday","Sunday"),"weekend", "weekday"))
average_steps<-ddply(activity_data,.(interval,weekdaytype),summarize, average=mean(steps))
average_steps<-ddply(new_activity,.(interval,weekdaytype),summarize, average=mean(steps))
qplot(steps~interval+weekdaytype,data=new_activity,type=l)
isWeekday(sys.Date)
isweekday(sys.Date())
qplot(steps~interval,data=new_activity,type=l)+facet_grid(weekdaytype~.)
qplot(steps,interval,data=new_activity,type=l,facets=weekdaytype~.)
qplot(steps,interval,data=new_activity,facets=weekdaytype~.)+geom_line()
qplot(interval,steps,data=new_activity,facets=weekdaytype~.)+geom_line()
newaverage_steps<-ddply(new_activity,.(interval,weekdaytype),summarize, average=mean(steps))
qplot(interval,newaverage_steps,data=new_activity,facets=weekdaytype~.)+geom_line()
qplot(interval,steps,data=new_activity,facets=weekdaytype~.)+geom_line()
qplot(interval,steps,data=new_activity,facets=weekdaytype~.,geom="line")
xyplot(steps~interval|weekdaytype,data=new_activity,type="l",layout=c(1,2))
library(lattice)
xyplot(steps~interval|weekdaytype,data=new_activity,type="l",layout=c(1,2))
xyplot(newaverage_steps~interval|weekdaytype,data=new_activity,type="l",layout=c(1,2))
newaverage_steps<-ddply(new_activity,.(interval,weekdaytype),summarize, average=mean(steps))
xyplot(newaverage_steps~interval|weekdaytype,data=new_activity,type="l",layout=c(1,2))
xyplot(mean(steps~interval|weekdaytype,data=new_activity,type="l",layout=c(1,2))
)
xyplot(mean(steps)~interval|weekdaytype,data=new_activity,type="l",layout=c(1,2))
str(new_average_steps)
str(newaverage_steps)
xyplot(average~interval|weekdaytype,data=newaverage_steps,type="l",layout=c(1,2))
qplot(average,interval,data=newaverage_steps,facets=weekdaytype~.,geom="line")
qplot(interval,average,data=newaverage_steps,facets=weekdaytype~.,geom="line")
?xyplot
xyplot(average~interval|weekdaytype,data=newaverage_steps,type="l",layout=c(1,2),ylab="Average number of steps"",title="abcd")
xyplot(average~interval|weekdaytype,data=newaverage_steps,type="l",layout=c(1,2), ylab="Average number of steps")
xyplot(average~interval|weekdaytype,data=newaverage_steps,type="l",layout=c(1,2), ylab="Average number of steps", title="abcd")
xyplot(average~interval|weekdaytype,data=newaverage_steps,type="l",layout=c(1,2), ylab="Average number of steps", title="abcd")
xyplot(average~interval|weekdaytype,data=newaverage_steps,type="l",layout=c(1,2), ylab="Average number of steps", main="abcd")
xyplot(average~interval|weekdaytype,data=newaverage_steps,type="l",layout=c(1,2), ylab="Average number of steps", main="average number of steps per interval and weekdaytype")
average_steps<-ddply(activity_data,.(interval),summarize, average=mean(steps,na.rm=TRUE))
qplot(interval,average,data=average_steps,geom="line")+ labs(title="Average steps versus interval")+ylab("Average number of steps(averaged across all days)")
max_avgsteps_interval<-average_steps$interval[which.max(average_steps$average)]
#print(paste("The 5-minute interval which contains maximum of average number of steps is: ", max_avgsteps_interval))
max_avgsteps_interval
total_na<-sum(is.na(activity_data))
total_na
colsums<-colSums(is.na(activity_data))
colsums
setwd("C:/Users/priti/Desktop/coursera_ds/repro research/PeerAssessment1/RepData_PeerAssessment1")
